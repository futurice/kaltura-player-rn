{"version":3,"names":["KalturaPlayerModule","NativeModules","POSITION_UNSET","debugLogs","KalturaPlayerAPI","playerType","options","id","printConsoleLog","LogType","ERROR","PLAYER_TYPE","BASIC","setupKalturaPlayer","asset","loadMediaKalturaPlayer","addPlayerView","removePlayerView","addKalturaPlayerListeners","removeKalturaPlayerListeners","onApplicationPaused","onApplicationResumed","configs","stringifiedJson","JSON","stringify","updatePluginConfigs","play","pause","stop","destroy","replay","position","seekTo","trackId","changeTrack","rate","changePlaybackRate","vol","setVolume","isAutoPlay","setAutoplay","KS","setKS","seekToLiveDefaultPosition","subtitleStyle","updateSubtitleStyle","mode","updateResizeMode","abrSettings","updateAbrSettings","resetAbrSettings","lowLatencyConfig","updateLLConfig","resetLLConfig","getCurrentPosition","isPlaying","isLive","positionMs","getThumbnailInfo","enabled","logLevel","LOG_LEVEL","DEBUG","OFF","setLogLevel","kalturaPlayerSetup","setUpPlayer","exception","Promise","reject","loadMedia","load","currentPosition","isPlayerPlaying","isPlayerLive","thumbnailInfo","requestThumbnailInfo","message","logType","LOG","console","log","WARN","warn","error"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport { PlayerEvents } from './events/PlayerEvents';\nimport { AdEvents } from './events/AdEvents';\nimport { AnalyticsEvents } from './events/AnalyticsEvents';\nimport {\n  PLAYER_TYPE,\n  MEDIA_FORMAT,\n  MEDIA_ENTRY_TYPE,\n  DRM_SCHEME,\n  PLAYER_PLUGIN,\n  PLAYER_RESIZE_MODES,\n  WAKEMODE,\n  SUBTITLE_STYLE,\n  SUBTITLE_PREFERENCE,\n  VIDEO_CODEC,\n  AUDIO_CODEC,\n  VR_INTERACTION_MODE,\n  LOG_LEVEL,\n} from './consts';\n\nexport {\n  PlayerEvents,\n  AdEvents,\n  AnalyticsEvents,\n  PLAYER_TYPE,\n  MEDIA_FORMAT,\n  MEDIA_ENTRY_TYPE,\n  DRM_SCHEME,\n  PLAYER_PLUGIN,\n  PLAYER_RESIZE_MODES,\n  WAKEMODE,\n  SUBTITLE_STYLE,\n  SUBTITLE_PREFERENCE,\n  VIDEO_CODEC,\n  AUDIO_CODEC,\n  VR_INTERACTION_MODE,\n  LOG_LEVEL,\n};\n\nconst { KalturaPlayerModule } = NativeModules;\n\nconst POSITION_UNSET: number = -1;\nvar debugLogs = false;\n\nexport class KalturaPlayerAPI {\n  /**\n   * This method creates a Player instance internally (Basic, OVP/OTT Player)\n   * With this, it take the PlayerInitOptions which are having essential Player settings values\n   *\n   * @param playerType The Player Type, Basic/OVP/OTT.\n   * @param options PlayerInitOptions JSON String.\n   * @param id PartnerId (Don't pass this parameter for BasicPlayer. For OVP/OTT player this value\n   * should be always greater than 0 and should be valid otherwise, we will not be able to featch the details\n   * for the mediaId or the entryId)\n   */\n  static setup = async (\n    playerType: PLAYER_TYPE,\n    options: string,\n    id: number = 0\n  ) => {\n    if (playerType == null) {\n      printConsoleLog(`Invalid playerType = ${playerType}`, LogType.ERROR);\n      return;\n    }\n\n    if (!options && playerType != PLAYER_TYPE.BASIC) {\n      printConsoleLog(`setup, invalid options = ${options}`, LogType.ERROR);\n      return;\n    }\n    printConsoleLog('Setting up the Player');\n    return await setupKalturaPlayer(playerType, options, id);\n  };\n\n  /**\n   * Load the media with the given\n   *\n   * assetId OR mediaId OR entryID for OVP/OTT Kaltura Player\n   *\n   * playbackURL for Basic Kaltura Player\n   *\n   * @param id Playback URL for Kaltura Basic Player OR\n   * MediaId for Kaltura OTT Player OR\n   * EntryId for Kaltura OVP Player\n   * @param asset Media Asset JSON String\n   */\n  static loadMedia = async (id: string, asset: string) => {\n    if (!id) {\n      printConsoleLog(`loadMedia, invalid id = ${id}`, LogType.ERROR);\n      return;\n    }\n\n    printConsoleLog(\n      `Loading the media. assetId is: ${id} and media asset is: ${asset}`\n    );\n\n    return await loadMediaKalturaPlayer(id, asset);\n  };\n\n  /**\n   * Adds the Native Player View to the Player if not attached\n   * Ideally this API should be called after calling {@link removePlayerView}\n   */\n  static addPlayerView = () => {\n    printConsoleLog('Calling Native method addPlayerView()');\n    KalturaPlayerModule.addPlayerView();\n  };\n\n  /**\n   * Removes the Native Player View from the Player if it is attached\n   * Ideally this API should be called after calling {@link addPlayerView}\n   */\n  static removePlayerView = () => {\n    printConsoleLog('Calling Native method removePlayerView()');\n    KalturaPlayerModule.removePlayerView();\n  };\n\n  /**\n   * Add the listners for the Kaltura Player\n   */\n  static addListeners = () => {\n    printConsoleLog('Calling Native method addListeners()');\n    KalturaPlayerModule.addKalturaPlayerListeners();\n  };\n\n  /**\n   * Add the listners for the Kaltura Player\n   */\n  static removeListeners = () => {\n    printConsoleLog('Calling Native method removeListeners()');\n    KalturaPlayerModule.removeKalturaPlayerListeners();\n  };\n\n  /**\n   * Should be called when the application is in background\n   */\n  static onApplicationPaused = () => {\n    printConsoleLog('Calling Native method onApplicationPaused()');\n    KalturaPlayerModule.onApplicationPaused();\n  };\n\n  /**\n   * Should be called when the application comes back to\n   * foreground\n   */\n  static onApplicationResumed = () => {\n    printConsoleLog('Calling Native method onApplicationResumed()');\n    KalturaPlayerModule.onApplicationResumed();\n  };\n\n  /**\n   * Update Plugin Configs\n   *\n   * @param configs Updated Plugin Configs (YouboraConfig JSON, IMAConfig JSON etc)\n   */\n  static updatePluginConfigs = (configs: object) => {\n    if (!configs) {\n      printConsoleLog(\n        `updatePluginConfig, config is invalid: ${configs}`,\n        LogType.ERROR\n      );\n      return;\n    }\n\n    const stringifiedJson = JSON.stringify(configs);\n    printConsoleLog(`Updated Plugin is: ${stringifiedJson}`);\n\n    KalturaPlayerModule.updatePluginConfigs(stringifiedJson);\n  };\n\n  /**\n   * Play the player if it is not playing\n   */\n  static play = () => {\n    printConsoleLog('Calling Native method play()');\n    KalturaPlayerModule.play();\n  };\n\n  /**\n   * Pause the player if it is playing\n   */\n  static pause = () => {\n    printConsoleLog('Calling Native method pause()');\n    KalturaPlayerModule.pause();\n  };\n\n  /**\n   * Stops the player to the initial state\n   */\n  static stop = () => {\n    printConsoleLog('Calling Native method stop()');\n    KalturaPlayerModule.stop();\n  };\n\n  /**\n   * Destroy the Kaltura Player instance\n   */\n  static destroy = () => {\n    printConsoleLog('Calling Native method destroy()');\n    KalturaPlayerModule.destroy();\n  };\n\n  /**\n   * Replays the media from the beginning\n   */\n  static replay = () => {\n    printConsoleLog('Calling Native method replay()');\n    KalturaPlayerModule.replay();\n  };\n\n  /**\n   * Seek the player to the specified position\n   * @param position in miliseconds (Ms)\n   */\n  static seekTo = (position: number) => {\n    printConsoleLog(`Calling Native method seekTo() position is: ${position}`);\n    KalturaPlayerModule.seekTo(position);\n  };\n\n  /**\n   * Change a specific track (Video, Audio or Text track)\n   * @param trackId Unique track ID which was sent in `tracksAvailable` event\n   */\n  static changeTrack = (trackId: string) => {\n    if (!trackId) {\n      printConsoleLog(`trackId is invalid which is: ${trackId}`, LogType.ERROR);\n      return;\n    }\n    printConsoleLog('Calling Native method changeTrack()');\n    KalturaPlayerModule.changeTrack(trackId);\n  };\n\n  /**\n   * Change the playback rate (ff or slow motion). Default is 1.0f\n   * @param rate Desired playback rate (Ex: 0.5f, 1.5f 2.0f etc)\n   */\n  static setPlaybackRate = (rate: number) => {\n    printConsoleLog(`Calling Native method setPlaybackRate() rate is: ${rate}`);\n    KalturaPlayerModule.changePlaybackRate(rate);\n  };\n\n  /**\n   * Change the volume of the current audio track.\n   * Accept values between 0.0 and 1.0. Where 0.0 is mute and 1.0 is maximum volume.\n   * If the volume parameter is higher then 1.0, it will be converted to 1.0.\n   * If the volume parameter is lower then 0.0, it be converted to 0.0.\n   *\n   * @param vol - volume to set.\n   */\n  static setVolume = (vol: number) => {\n    printConsoleLog('Calling Native method setVolume()');\n    KalturaPlayerModule.setVolume(vol);\n  };\n\n  /**\n   * Set the media to play automatically at the start (load)\n   * if `false`, user will have to click on UI play button\n   *\n   * @param isAutoPlay media should be autoplayed at the start or not\n   */\n  static setAutoPlay = (isAutoPlay: boolean) => {\n    printConsoleLog('Calling Native method setAutoPlay()');\n    KalturaPlayerModule.setAutoplay(isAutoPlay);\n  };\n\n  /**\n   * Set the KS for the media (only for OVP/OTT users)\n   * Call this before calling {@link loadMedia}\n   * @param KS Kaltura Secret key\n   */\n  static setKS = (KS: string) => {\n    if (!KS) {\n      printConsoleLog('KS is invalid which is: ' + KS, LogType.ERROR);\n      return;\n    }\n    printConsoleLog('Calling Native method setKS()');\n    KalturaPlayerModule.setKS(KS);\n  };\n\n  /**\n   * NOOP\n   * @param index\n   */\n  //static setZIndex = (index: number) => {\n  //  printConsoleLog('Calling Native method setZIndex()');\n  //};\n\n  /**\n   * Only for Live Media.\n   * Seek player to Live Default Position.\n   */\n  static seekToLiveDefaultPosition = () => {\n    printConsoleLog('Calling Native method seekToLiveDefaultPosition()');\n    KalturaPlayerModule.seekToLiveDefaultPosition();\n  };\n\n  /**\n   * Update the existing subtitle styling\n   */\n  static updateSubtitleStyle = (subtitleStyle: string) => {\n    if (!subtitleStyle) {\n      printConsoleLog(\n        `subtitleStyle is invalid which is: ${subtitleStyle}`,\n        LogType.ERROR\n      );\n      return;\n    }\n    printConsoleLog('Calling Native method updateSubtitleStyle()');\n    KalturaPlayerModule.updateSubtitleStyle(subtitleStyle);\n  };\n\n  /**\n   * Update the Resize Mode\n   */\n  static updateResizeMode = (mode: PLAYER_RESIZE_MODES) => {\n    printConsoleLog(\n      'Calling Native method updateSurfaceAspectRatioResizeMode()'\n    );\n    KalturaPlayerModule.updateResizeMode(mode);\n  };\n\n  /**\n   * Update the ABR Settings\n   */\n  static updateAbrSettings = (abrSettings: string) => {\n    if (!abrSettings) {\n      printConsoleLog(\n        `abrSettings is invalid which is: ${abrSettings}`,\n        LogType.ERROR\n      );\n      return;\n    }\n    printConsoleLog('Calling Native method updateABRSettings()');\n    KalturaPlayerModule.updateAbrSettings(abrSettings);\n  };\n\n  /**\n   * Reset the ABR Settings\n   */\n  static resetAbrSettings = () => {\n    printConsoleLog('Calling Native method resetABRSettings()');\n    KalturaPlayerModule.resetAbrSettings();\n  };\n\n  /**\n   * Update the Low Latency Config\n   * Only for Live Media\n   */\n  static updateLowLatencyConfig = (lowLatencyConfig: string) => {\n    if (!lowLatencyConfig) {\n      printConsoleLog(\n        `lowLatencyConfig is invalid which is: ${lowLatencyConfig}`,\n        LogType.ERROR\n      );\n      return;\n    }\n    printConsoleLog('Calling Native method updateLowLatencyConfig()');\n    KalturaPlayerModule.updateLLConfig(lowLatencyConfig);\n  };\n\n  /**\n   * Reset the Low Latency Config\n   * Only for Live Media\n   */\n  static resetLowLatencyConfig = () => {\n    printConsoleLog('Calling Native method resetLowLatencyConfig()');\n    KalturaPlayerModule.resetLLConfig();\n  };\n\n  /**\n   * Get the current playback position for Content and Ad\n   * @returns number: Position of the player or {@link POSITION_UNSET}\n   */\n  static getCurrentPosition = async () => {\n    printConsoleLog('Calling Native method getCurrentPosition()');\n    return await getCurrentPosition();\n  };\n\n  /**\n   * Checks if Player is currently playing or not\n   * @returns boolean\n   */\n  static isPlaying = async () => {\n    printConsoleLog('Calling Native method isPlaying');\n    return await isPlaying();\n  };\n\n  /**\n   * Checks if the stream is Live or Not\n   * @returns boolean\n   */\n  static isLive = async () => {\n    printConsoleLog('Calling Native method isLive');\n    return await isLive();\n  };\n\n  /**\n   * Get the Information for a thumbnail image by position.\n   *\n   * @param positionMs - relevant image for given player position.\n   * @returns ThumbnailInfo JSON object\n   */\n  static requestThumbnailInfo = async (positionMs: number) => {\n    printConsoleLog('requestThumbnailInfo');\n    if (positionMs < 0) {\n      printConsoleLog(`Invalid positionMs = ${positionMs}`, LogType.ERROR);\n      return;\n    }\n    return await getThumbnailInfo(positionMs);\n  };\n\n  /**\n   * Enable the console logs for the JS bridge and Player.\n   * By default it is disabled.\n   *\n   * For logLevel options {@link LOG_LEVEL}\n   *\n   * @param enabled enable the debug logs. Just set it to `false` to disable all the logs.\n   * @param logLevel Default is `LOG_LEVEL.DEBUG` if set to `LOG_LEVEL.OFF` will turn off the logs.\n   *\n   * @returns if `enabled` is `null` then don't do anything\n   */\n  static enableDebugLogs = (\n    enabled: boolean,\n    logLevel: LOG_LEVEL = LOG_LEVEL.DEBUG\n  ) => {\n    if (enabled == null || logLevel == null) {\n      return;\n    }\n\n    debugLogs = enabled;\n\n    if (debugLogs === false || logLevel == LOG_LEVEL.OFF) {\n      debugLogs = false;\n      KalturaPlayerModule.setLogLevel(LOG_LEVEL.OFF);\n    } else {\n      KalturaPlayerModule.setLogLevel(logLevel);\n    }\n  };\n}\n\nasync function setupKalturaPlayer(\n  playerType: PLAYER_TYPE,\n  options: string,\n  id: number\n) {\n  try {\n    const kalturaPlayerSetup = await KalturaPlayerModule.setUpPlayer(\n      playerType,\n      id,\n      options\n    );\n    printConsoleLog(`Player is created: ${kalturaPlayerSetup}`);\n    return kalturaPlayerSetup;\n  } catch (exception) {\n    printConsoleLog(\n      `setupKalturaPlayer Exception: ${exception}`,\n      LogType.ERROR\n    );\n    return Promise.reject(exception);\n  }\n}\n\nasync function loadMediaKalturaPlayer(id: string, asset: string) {\n  try {\n    const loadMedia = await KalturaPlayerModule.load(id, asset);\n    printConsoleLog(`Media Loaded ${loadMedia}`);\n    return loadMedia;\n  } catch (exception) {\n    printConsoleLog(\n      `loadMediaKalturaPlayer Exception: ${exception}`,\n      LogType.ERROR\n    );\n    return Promise.reject(exception);\n  }\n}\n\nasync function getCurrentPosition() {\n  try {\n    const currentPosition = await KalturaPlayerModule.getCurrentPosition();\n    printConsoleLog(`Current Position: ${currentPosition}`);\n    return currentPosition;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return POSITION_UNSET;\n  }\n}\n\nasync function isPlaying() {\n  try {\n    const isPlayerPlaying = await KalturaPlayerModule.isPlaying();\n    printConsoleLog(`isPlayerPlaying ${isPlayerPlaying}`);\n    return isPlayerPlaying;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return false;\n  }\n}\n\nasync function isLive() {\n  try {\n    const isPlayerLive = await KalturaPlayerModule.isLive();\n    printConsoleLog(`isPlayerLive ${isPlayerLive}`);\n    return isPlayerLive;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return false;\n  }\n}\n\nasync function getThumbnailInfo(position: number) {\n  try {\n    const thumbnailInfo = await KalturaPlayerModule.requestThumbnailInfo(\n      position\n    );\n    printConsoleLog(`getThumbnailInfo ${JSON.stringify(thumbnailInfo)}`);\n    return thumbnailInfo;\n  } catch (exception) {\n    printConsoleLog(`Exception: ${exception}`, LogType.ERROR);\n    return Promise.reject(exception);\n  }\n}\n\nfunction printConsoleLog(message: String, logType: LogType = LogType.LOG) {\n  if (debugLogs) {\n    switch (logType) {\n      case LogType.LOG: {\n        console.log(message);\n        break;\n      }\n      case LogType.WARN: {\n        console.warn(message);\n        break;\n      }\n      case LogType.ERROR: {\n        console.error(message);\n        break;\n      }\n      default: {\n        console.log(message);\n      }\n    }\n  }\n}\n\nenum LogType {\n  LOG,\n  WARN,\n  ERROR,\n}\n"],"mappings":"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"}